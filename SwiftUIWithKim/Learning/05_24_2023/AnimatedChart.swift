//
//  AnimatedChart.swift
//  SwiftUIWithKim
//
//  Created by Kimleng Hor on 5/24/23.
//

import SwiftUI

struct AnimatedChart: View {
    
    let data = [
        26665.475068072148,
        26708.778622873,
        26691.77817218778,
        26766.123353097075,
        26801.82548990965,
        26906.70318017175,
        27088.930057578586,
        27118.71428552706,
        27386.19613587509,
        27341.144838004864,
        27366.206650220356,
        27342.458692188102,
        27389.971511442203,
        27372.63600319379,
        27324.560113802785,
        27348.22692778296,
        27364.378972312057,
        27323.78800724886,
        27269.636440488634,
        27224.497098712734,
        27398.49600220705,
        27425.137488640612,
        27420.620020712646,
        27364.429581604498,
        27377.903607083736,
        27271.63626680185,
        27249.64696391417,
        27266.361352859756,
        27164.690383144305,
        27098.355571678523,
        26634.99989255828,
        26609.283009671857,
        26757.069636462595,
        26734.4228367432,
        26954.049955777133,
        26890.58093169065,
        26842.95249471792,
        26862.697644238044,
        26797.161274137274,
        26832.173000277435,
        26840.50981889964,
        26861.988720111985,
        26865.531410499854,
        26926.89908684181,
        26869.605123666614,
        26902.60104180959,
        26839.312097815997,
        26839.730333103053,
        26847.67769927846,
        26922.697860618115,
        26884.58461774335,
        26822.19188673361,
        26892.732578978343,
        26846.7155702216,
        26931.99522787957,
        26902.52718904712,
        26833.191999487048,
        26837.035853430727,
        26892.246305752768,
        26881.87377252361,
        26884.371059589947,
        26856.039858445933,
        26863.687715833403,
        26847.973115332796,
        26875.35495806678,
        26875.504721550118,
        26872.54163585236,
        26856.140214966366,
        26861.728283519016,
        26900.704892309306,
        26890.451348743918,
        26892.97446791075,
        26886.58006458474,
        26910.823628226157,
        26894.30032792635,
        26912.20363683264,
        26947.59734915364,
        26927.192748752994,
        27087.460893326,
        27048.558580564448,
        27072.193735646943,
        27031.657038040106,
        27042.902175869334,
        27075.28491632533,
        27101.218998789896,
        27230.28688546331,
        27177.98658323714,
        27173.078095143886,
        27186.015955660823,
        27156.865348238673,
        27111.43059273753,
        27100.92425802607,
        27074.201259310426,
        27057.311692682288,
        27064.80531669238,
        26985.593343277495,
        26904.421589439742,
        26882.330221646378,
        26921.666809622213,
        26958.990149335063,
        26908.865562515894,
        26900.680684955492,
        26908.28228602222,
        26872.356697393854,
        26909.609667987155,
        26873.27670141222,
        26768.160856395705,
        26777.79839608871,
        26773.83024366478,
        26687.76401072988,
        26610.191055561972,
        26657.666860149122,
        26678.89624583248,
        26697.855867979455,
        26763.045904653056,
        26842.269738155013,
        26850.318264894708,
        26860.251542146107,
        26859.640740225765,
        26829.670677433314,
        26813.417866765652,
        26748.186199516895,
        27027.27277363167,
        26945.79976118438,
        26882.201645157253,
        26868.155468374833,
        26858.24442397089,
        26888.514445747012,
        26850.46340814087,
        26870.652378156145,
        26912.917102663214,
        26880.12260504616,
        26862.594876879677,
        26901.503770153227,
        27069.1155538982,
        27050.58189923086,
        27350.217998855227,
        27396.695219130637,
        27416.564946062732,
        27305.095919235962,
        27270.823099174235,
        27334.84596512159,
        27292.209782727867,
        27292.62052373694,
        27335.94345232066,
        27285.695723197812,
        27227.265705951973,
        27304.29366233824,
        27309.80686389815,
        27250.604759718233,
        27191.58486360124,
        27158.630583784463,
        27190.686908928994,
        27224.642562384503,
        27207.34009973233,
        27198.711749279388,
        27221.80881877772,
        27153.235050992225,
        27151.503822695537,
        27163.216088672114,
        26763.117941537657,
        26803.47147521241,
        26782.118909976758,
        26725.091583340374,
        26668.30104178187,
        26734.044072188557,
        26763.747024986726,
        26726.39155402606
    ]
    
    @State private var percentage: CGFloat = 0
    
    var body: some View {
        VStack {
            chartView
                .frame(height: 200)
                .background(chartBackground)
        }
        .onAppear {
            DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                withAnimation(.linear(duration: 3.0)) {
                    percentage = 1
                }
            }
        }
    }
    
    private var chartView: some View {
        GeometryReader { geometry in
            Path { path in
                for index in data.indices {
                    let xPosition = geometry.size.width / CGFloat(data.count) * CGFloat(index + 1)
                    
                    let minY = data.min() ?? 0
                    let maxY = data.max() ?? 0
                    let yAxis = maxY - minY
                    
                    let yPosition = (1 - CGFloat((data[index] - minY) / yAxis)) * geometry.size.height
                    
                    if index == 0 {
                        path.move(to: CGPoint(x: xPosition, y: yPosition))
                    }
                    
                    path.addLine(to: CGPoint(x: xPosition, y: yPosition))
                }
            }
            .trim(from: 0, to: CGFloat(percentage))
            .stroke(Color.green, style: StrokeStyle(lineWidth: 2, lineCap: .round, lineJoin: .round))
            .shadow(color: Color.green, radius: 10, x: 0, y: 10)
            .shadow(color: Color.green.opacity(0.5), radius: 10, x: 0, y: 20)
            .shadow(color: Color.green.opacity(0.2), radius: 10, x: 0, y: 30)
            .shadow(color: Color.green.opacity(0.1), radius: 10, x: 0, y: 40)
        }
    }
    
    private var chartBackground: some View {
        VStack {
            Divider()
            Spacer()
            Divider()
            Spacer()
            Divider()
        }
    }
}

struct AnimatedChart_Previews: PreviewProvider {
    static var previews: some View {
        AnimatedChart()
    }
}
